<%- include('partials/header') %>
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/profile.css" />
    <title>Noodle</title>
  </head>
  <body>
    <%-include('partials/navbar', { activePage: 'none' }) %>
    <div class="mt-5"></div>
    <div id="main" style="height: fit-content !important">
      <div id="password-area" class="section show" style="padding: 0 200px">
        <div class="text-center mt-3 fs-2 fw-bold">Password</div>
        <form class="inpForm">
          <div class="mt-5 mb-3">
            <label for="current-password" class="form-label fs-4 fw-bold"
              >Current password</label
            >
            <div class="input-group">
              <input
                type="password"
                class="form-control rounded-4 fs-4"
                id="current-password"
              />
            </div>
            <div class="error"></div>
          </div>
          <div class="mb-3">
            <label for="new-password" class="form-label fs-4 fw-bold"
              >New password</label
            >
            <div class="input-group">
              <input
                type="password"
                class="form-control rounded-4 fs-4"
                id="new-password"
              />
            </div>
            <div class="error"></div>
          </div>
          <div class="mb-3">
            <label for="confirm-password" class="form-label fs-4 fw-bold"
              >Confirm new password</label
            >
            <div class="input-group">
              <input
                type="password"
                class="form-control rounded-4 fs-4"
                id="confirm-password"
              />
            </div>
            <div class="error"></div>
          </div>

          <button
            type="submit"
            class="mt-5 btn btn-primary fs-5 mx-auto d-block"
            style="background-color: #0098f9"
          >
            Update</button
          ><!-- Button trigger modal -->
        </form>
      </div>
    </div>

    <!-- Modal -->
    <div
      class="modal fade"
      id="popupModal"
      tabindex="-1"
      aria-labelledby="staticBackdropLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div
            class="modal-body d-flex flex-column gap-3 justify-content-center align-items-center"
            style="height: 250px"
          >
            <i id="popup-sign" style="font-size: 150px"></i>
            <div id="popup-message" class="fs-5 fw-bold text-center"></div>
          </div>
        </div>
      </div>
    </div>
    <div id="user-username" class="d-none"><%= username %></div>
    <%-include('partials/footer') %>
    <script>
      function popUpMessage(status, message, time = 1000) {
        // Show the modal on page load
        const fail_sign = "fa-solid fa-triangle-exclamation text-danger";
        const success_sign = "fa-solid fa-circle-check text-success";
        if (status == "fail") {
          $("#popupModal")
            .find("#popup-sign")
            .removeClass(success_sign)
            .addClass(fail_sign);
        } else {
          $("#popupModal")
            .find("#popup-sign")
            .removeClass(fail_sign)
            .addClass(success_sign);
        }
        $("#popupModal").find("#popup-message").text(message);
        $("#popupModal").modal("show");

        // // Set timeout to hide the modal after 1 second (1000 milliseconds)
        // setTimeout(function () {
        //   $("#popupModal").modal("hide");
        // }, time);
      }
    </script>
    <script>
      function validateField(field) {
        if (field.value === "") {
          field.classList.add("error-highlight");
          field.parentNode.nextElementSibling.textContent =
            "This field is required";
        } else {
          field.classList.remove("error-highlight");
          field.parentNode.nextElementSibling.textContent = "";
        }
      }

      const form = document.querySelector(".section.show .inpForm");
      const inputs = form.querySelectorAll("input");
      function checkFullFieldInput() {
        let flag = 1;
        inputs.forEach(function (input) {
          if (!flag) return;
          if (!input.disabled && input.value === "") {
            flag = 0;
            return;
          }
        });
        return flag;
      }
      inputs.forEach(function (input) {
        input.addEventListener("blur", () => {
          validateField(input);
        });
      });

      const newPass = document.getElementById("new-password");
      const confirmPas = document.getElementById("confirm-password");
      const curPass = document.getElementById("current-password");
      var flagConfirm = 0;

      function checkConfirm(newP, confirmP) {
        if (confirmP.value != newP.value) {
          confirmP.classList.add("error-highlight");
          confirmP.parentNode.nextElementSibling.textContent =
            "Confirm password is incorrect";
          flagConfirm = 0;
        } else {
          confirmP.classList.remove("error-highlight");
          confirmP.parentNode.nextElementSibling.textContent = "";
          flagConfirm = 1;
        }
      }
      confirmPas.addEventListener("input", () => {
        checkConfirm(newPass, confirmPas);
      });

      $(".section.show .inpForm").on("submit", function (event) {
        event.preventDefault();
        const formData = $(this).serialize();

        if (!checkFullFieldInput()) {
          return popUpMessage("fail", "Please fill in all the fields.");
        }

        if (!flagConfirm)
          return popUpMessage("fail", "Confirm password is incorrect");
        $.post("/api/auth/updatePassword", {
          curPass: curPass.value,
          newPass: newPass.value,
        })
          .done(function (data) {
            popUpMessage(data.status, data.message);
          })
          .fail(function (xhr, textStatus, errorThrown) {
            popUpMessage("fail", xhr.responseText);
            console.log(
              "Error: " + xhr.status + " " + textStatus + " " + errorThrown
            );
          });
      });
    </script>
  </body>
</html>
